try:
    x = 10 / 0  # Попытка деления на ноль
except ZeroDivisionError:
    print("Ошибка: Деление на ноль!")


xp = """
В данном примере, блок try пытается выполнить операцию деления на ноль, что вызовет исключение ZeroDivisionError. Однако блок except перехватывает это исключение и выводит сообщение об ошибке.
Также можно добавить несколько блоков except, чтобы обработать различные типы исключений:"""
print(xp)


try:
    x = 10 / 0  # Попытка деления на ноль
except ZeroDivisionError:
    print("Ошибка: Деление на ноль!")
except TypeError:
    print("Ошибка: Несоответствие типов данных!")


try:
    x = int(input("Введите число: "))
    result = 10 / x
except ValueError:
    print("Ошибка! Неправильный формат числа.")
except ZeroDivisionError:
    print("Ошибка деления на ноль!")
else:
    print(f"Результат деления: {result}")
finally:
    print("Блок finally всегда выполняется.")


xp2 = """"
В этом примере, блок finally будет выполняться независимо от того, были ли исключения в блоке try или нет. Если пользователь введет некорректный формат числа, программа выведет сообщение об ошибке и затем сообщение из блока finally. Если же пользователь введет корректное число и не ноль, программа выведет результат деления и затем также сообщение из блока finally.

Таким образом, блок finally позволяет выполнить определенные завершающие действия независимо от исключений, что делает код более устойчивым и предсказуемым."""

print(xp2)